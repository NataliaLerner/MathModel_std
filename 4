import numpy as np
import scipy.linalg as la
import scipy.interpolate as interp
from scipy.integrate import odeint
import scipy.fftpack as fft
from scipy.signal import argrelmax
from scipy.signal import argrelmin
import matplotlib as mpl
import matplotlib.pyplot as plt
import copy

def func(u,t, args):
    a = args
    f1 = 1 + a * u[1] * u[2]
    f2 = u[0] - u[1]
    f3 = 1 - u[0] * u[1]

    return [f1, f2, f3]
#-------------------------


def Simple():

    t = np.arange(0,200, 0.1)
    u0 = [0.5, 1.5, 1]

    u = odeint(func, u0, t, args=(0.5,))
    #u = odeint(func, u0, t, args(param,)) 1     1.75 b
    #plt.plot(t, abs(u[:, 0]))
    #plt.plot(t, abs(u[:, 1]))


#-----------------------------
    arrmax = argrelmax(u[:, 0])
    arrmin = argrelmin(u[:, 0])

    for i in range(len(arrmax[0])):
        print (u[:,0][arrmax[0][i]])

    for i in range(len(arrmin[0])):
        print (u[:,0][arrmin[0][i]])

#-----------------------------

    temp1 = []
    for i in range(len(arrmax[0])):
         temp1.append(u[:,0][arrmax[0][i]])


    temp2 = []
    for i in range(len(arrmin[0])):
        temp2.append(u[:,0][arrmin[0][i]])


    plt.plot(temp1, 'o')
    plt.plot(temp2, 'o')



    plt.show()


#спектральный анализ
def Simple1():
    t = np.arange(0,100, 0.1)
    u0 = [0.5, 1.5, 1]

    a = [0.3]

    for i in range(len(a)):
        u = odeint(func, u0, t, args = (a[i],))
        print(u[:, 0])
        plt.plot(t, abs(u[:, 0]))
        plt.plot(t, abs(u[:, 1]))
        plt.show()
        plt.figure()

        #-----------------------------

        arrmax = argrelmax(u[:, 0])
        arrmin = argrelmin(u[:, 0])

        #-----------------------------

        temp1 = []
        for i in range(len(arrmax[0])):
            temp1.append(u[:,0][arrmax[0][i]])


        temp2 = []
        for i in range(len(arrmin[0])):
            temp2.append(u[:,0][arrmin[0][i]])

        y = u[:, 0]

        x = copy.deepcopy(t[200:])
        y = copy.deepcopy(y[200:])



        L = max(x) - min(x)
        a = np.zeros ((len(x)))
        b = np.zeros ((len(x)))
        A = np.zeros ((len(x)))

        CosTerm = np.zeros ((len(x)))
        SinTerm = np.zeros ((len(x)))

        n = len(x)

        dx = L / (n-1)
        a[0] = 1./L * np.sum (y [:(n-1)]) * dx
        b[0] = 0.

        for k in range (1, n-1):

            CosTerm = np.cos(2.* np.pi * k * x / L) * dx
            SinTerm =  np.sin(2.* np.pi * k * x / L) * dx

            a[k]  = 2./L * np.sum (y[:(n-1)]*CosTerm [:(n-1)])
            b[k]  = 2./L * np.sum (y[:(n-1)]*SinTerm [:(n-1)])

            A = (a**2+b**2)**(0.5)

        plt.plot (A[0:n], 'o')
        plt.show()

        m = int(n/2)

        yf = np.zeros (n)

        for k in range (0, m):

            yf += a[k]*np.cos(2.* np.pi * k * x / L) + b[k]*np.sin(2.* np.pi * k * x / L)

        plt.figure()

        plt.plot (x,y)
        plt.plot (x,yf,'o')
        plt.show()

def Simple2():
    t = np.arange(0,100, 0.1)
    u0 = [0.5, 1.5, 1]

    a = [0.5, 0.7, 1, 7]

    for i in range(len(a)):
        u = odeint(func, u0, t, args=(a[i],))

        arrmax = argrelmax(u[:, 0])
        arrmin = argrelmin(u[:, 0])


        temp1 = []
        for i in range(len(arrmax[0])):
            temp1.append(u[:,0][arrmax[0][i]])

        temp2 = []
        for i in range(len(arrmin[0])):
           temp2.append(u[:,0][arrmin[0][i]])

        plt.plot(temp1, 'o') #максимумы
        plt.plot(temp2, 'o') #минимумы
        plt.show()

